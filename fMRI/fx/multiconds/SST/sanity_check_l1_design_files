#this script is designed to open up level 1 design files and count the number of items in each condition across the subjects
from pathlib import Path
import re
import pandas as pd

import scipy.io


#input_dir = '/Users/benjaminsmith/Google Drive/oregon/code/DEV_scripts/fMRI/fx/multiconds/SST/full_duration/posterror_cues'
input_dir = '/Users/benjaminsmith/Google Drive/oregon/code/DEV_scripts/fMRI/fx/multiconds/SST/full_duration/posterror_conditions_w_pss'


files = list(Path(input_dir).glob('DEV*.mat'))
    
files.sort()

pattern = "DEV(\\d{3})_(\\d*).*.mat"

#create an empty dataframe to columns for subject ID, wave ID, condition name, and number of trials
trial_count_df = pd.DataFrame(columns=['subject_id','wave_id','condition_name','trial_count'])

#print out the subject ID and wave ID in each filename based on the pattern
for f in files:
    match = re.search(pattern, str(f.name))

    

    if match:
        subject_id, wave_number = match.groups()
        print(f.name +  "; subject " + subject_id + "; wave " + wave_number)

        #now open up the .mat file for reading
        mat_dict = scipy.io.loadmat(str(f), appendmat=False)

        condition_names = mat_dict['names'][0]

        




        for i, condition_name in enumerate(condition_names):
            # print(condition_name)
            onset_count = len(mat_dict['onsets'][0][i])
            durations_count = len(mat_dict['durations'][0][i])
            if onset_count!=durations_count:
                print("Error: onset count and duration count do not match for condition " + condition_name + " in file " + f.name)
                print("onset count: " + onset_count)
                print("duration count: " + durations_count)
                #go to next iteration in condition loop
                continue

            trial_count=onset_count
            # print("number of trials: " + str(trial_count))

            #add a row to the dataframe for this condition using pandas.concat
            trial_count_df = pd.concat([trial_count_df, pd.DataFrame({'subject_id':subject_id,'wave_id':wave_number,'condition_name':condition_name,'trial_count':trial_count})],ignore_index=True)
    


#now aggregate by getting the min, max, and mean trial count for each condition
trial_count_df_summary = trial_count_df.groupby(['condition_name']).agg({'trial_count':['min','max','mean']})
print(trial_count_df_summary)



